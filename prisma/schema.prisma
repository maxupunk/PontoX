// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String?
  login              String?              @unique @default(uuid())
  password           String?              @default(uuid())
  token              String?
  daysWeek           String? // JSON with days of the week
  role               String               @default("funcionario")
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  points             Point[]              @relation("UserPoints")
  WorkHours          WorkHour[]           @relation("UserWorkHour")
  BankHour           BankHour[]           @relation("UserBankHour")
  
  @@map("users")
}

model BankHour {
  id          Int       @id @default(autoincrement())
  userId      Int       // Chave estrangeira para o modelo User
  date        String    // data que foi pego o saldo, calculado aparte do ultimo saldo tirado
  minute      Float     // Saldo em horas, pode ser positivo ou negativo em caso uso
  observation String?   // Observação (usado para justificar o saldo)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id], name: "UserBankHour")

  @@map("bankHours")
}

// dias do mês
model WorkHour {
  id            Int      @id @default(autoincrement())
  date          String
  userId        Int
  user          User?    @relation(fields: [userId], references: [id], name: "UserWorkHour")
  entryTime     String
  departureTime String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  points        Point[]

  @@map("WorkHours")
}

// dias do mês fim
model Point {
  id                 Int       @id @default(autoincrement())
  userId             Int
  workHourId         Int?
  entryDate          String
  entryTime          String
  entryExpressio     String?
  entryImage         String?
  departureDate      String?
  departureTime      String?
  departureExpressio String?
  departureImage     String?
  observation        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  user               User?     @relation(fields: [userId], references: [id], name: "UserPoints")
  WorkHours          WorkHour? @relation(fields: [workHourId], references: [id])

  @@map("points")
}
